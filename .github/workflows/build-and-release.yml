name: Build and Release Docker Image

on:
  push:
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for tags

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Update version in build.gradle.kts from tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
          echo "Extracted version: $VERSION"
          
          # Update version in build.gradle.kts
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" build.gradle.kts
          
          # Verify the change
          grep "version = " build.gradle.kts
          
          # Set version as output
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Commit updated build.gradle.kts
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add build.gradle.kts
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit in build.gradle.kts."
          else
            git commit -m "chore: Update version to ${{ env.VERSION }} [skip ci]"
            # Decide if you want to push this commit. Pushing to a tag ref is unusual.
            # You might want to push to the branch the tag was created from (e.g., main)
            # Example (use with caution, ensure correct branch): git push origin HEAD:main
            echo "Committed build.gradle.kts version update."
            # If you uncomment the push command above, ensure the checkout action has a token with write permissions
            # e.g., add `token: ${{ secrets.PAT_TOKEN }}` to the checkout step if needed.
          fi

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/code-review-server
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha,format=short

      - name: Build and push Docker image
        if: github.event_name != 'pull_request'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          ./gradlew bootBuildImage --publishImage

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ env.VERSION }}
          body: |
            ## Code Review Server Release ${{ env.VERSION }}
            
            ### Docker Image
            ```bash
            docker pull ${{ secrets.DOCKER_USERNAME }}/code-review-server:${{ env.VERSION }}
            ```
            
            Docker Hub URL: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/code-review-server/tags
            
            ### Usage
            ```bash
            docker run -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/code-review-server:${{ env.VERSION }}

          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
